
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f0c  08000f0c  00010f14  2**0
                  CONTENTS
  4 .ARM          00000000  08000f0c  08000f0c  00010f14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f0c  08000f14  00010f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000000  08000f14  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000f14  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f14  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000519a  00000000  00000000  00010f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cb0  00000000  00000000  000160d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d28  00000000  00000000  00016d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00017ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00017cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002a7c  00000000  00000000  00017eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002692  00000000  00000000  0001a92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a6dd  00000000  00000000  0001cfbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002769b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d4  00000000  00000000  00027718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000edc 	.word	0x08000edc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000edc 	.word	0x08000edc

08000170 <clock_init>:
//#define MCU_ACT_as_Master
#define MCU_ACT_as_Slave
int flag;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <SPii_IRQ>:

unsigned char ch;
GPIO_PinConfig_t Pincfg;

void SPii_IRQ(struct SPI_IRQ_SRC irq_src)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]
#ifdef MCU_ACT_as_Slave
	if(irq_src.RXNE)
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <SPii_IRQ+0x2e>
	{
		ch=0xf;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SPii_IRQ+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &ch, pollingdisable);
 80001be:	2201      	movs	r2, #1
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <SPii_IRQ+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <SPii_IRQ+0x3c>)
 80001c4:	f000 fb5a 	bl	800087c <MCAL_SPI_TX_RX>
		MCAL_USART_Send_Data(USART1, &ch, enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <SPii_IRQ+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <SPii_IRQ+0x40>)
 80001ce:	f000 fd89 	bl	8000ce4 <MCAL_USART_Send_Data>
	}
#endif
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	2000003c 	.word	0x2000003c
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <test_IRQ>:


void test_IRQ(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 0);
	MCAL_SPI_TX_RX(SPI1, &ch, pollingenable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 1);
#endif

}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	clock_init();
 80001fa:	f7ff ffb9 	bl	8000170 <clock_init>
	USART_config U_cfg;

	U_cfg.Baud_rate=USART_BaudRate_115200;
 80001fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000202:	623b      	str	r3, [r7, #32]
	U_cfg.HW_Flow_Control=USART_Flow_Control_NONE;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	U_cfg.IRQ_Enable=USART_IRQ_ENABLE_RXNEIE;
 800020a:	2320      	movs	r3, #32
 800020c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	U_cfg.P_IRQ_Callback=test_IRQ;
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <main+0x84>)
 8000212:	62fb      	str	r3, [r7, #44]	; 0x2c
	U_cfg.Parity=USART_Parity_NONE;
 8000214:	2300      	movs	r3, #0
 8000216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	U_cfg.Payload_length=USART_Payload_Length_8;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	U_cfg.Stop_bits=USART_Stop_bit_1;
 8000220:	2300      	movs	r3, #0
 8000222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	U_cfg.USART_MODE = USART_MODE_TX_RX;
 8000226:	230c      	movs	r3, #12
 8000228:	773b      	strb	r3, [r7, #28]

	MCAL_USART_Init(USART1, &U_cfg);
 800022a:	f107 031c 	add.w	r3, r7, #28
 800022e:	4619      	mov	r1, r3
 8000230:	4812      	ldr	r0, [pc, #72]	; (800027c <main+0x88>)
 8000232:	f000 fc99 	bl	8000b68 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <main+0x88>)
 8000238:	f000 fd96 	bl	8000d68 <MCAL_USART_GPIO_Set_Pins>
	//==========================
	SPI_config spi_cnfg;
	spi_cnfg.Comm_Mode=SPI_COMM_MODE_2LINES_TX_RX;
 800023c:	2300      	movs	r3, #0
 800023e:	80fb      	strh	r3, [r7, #6]
	spi_cnfg.Data_size=SPI_DATA_SIZE_8_BIT;
 8000240:	2300      	movs	r3, #0
 8000242:	817b      	strh	r3, [r7, #10]
	spi_cnfg.Clock_Phase=SPI_CLOCK_PHASE_FIRST_EDGE;
 8000244:	2300      	movs	r3, #0
 8000246:	81fb      	strh	r3, [r7, #14]
	spi_cnfg.Clock_Polarity=SPI_CLOCK_POLARITY_HIGH_WHEN_IDLE;
 8000248:	2302      	movs	r3, #2
 800024a:	81bb      	strh	r3, [r7, #12]
	spi_cnfg.Frame_Format=SPI_FRAME_MSB_FIRST;
 800024c:	2300      	movs	r3, #0
 800024e:	813b      	strh	r3, [r7, #8]
	spi_cnfg.SPI_Clock_Freq=SPI_BAUD_RATE_PRESCALER_8;
 8000250:	2310      	movs	r3, #16
 8000252:	827b      	strh	r3, [r7, #18]

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 1);
#endif

#ifdef MCU_ACT_as_Slave
	spi_cnfg.IRQ_Enable=SPI_IRQ_ENABLE_RXNIE;
 8000254:	2340      	movs	r3, #64	; 0x40
 8000256:	82bb      	strh	r3, [r7, #20]
	spi_cnfg.Device_Mode=SPI_DEVICE_MODE_SLAVE;
 8000258:	2300      	movs	r3, #0
 800025a:	80bb      	strh	r3, [r7, #4]
	spi_cnfg.NSS=SPI_NSS_HARDWARE_SLAVE;
 800025c:	2300      	movs	r3, #0
 800025e:	823b      	strh	r3, [r7, #16]
	spi_cnfg.P_IRQ_Callback=SPii_IRQ;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x8c>)
 8000262:	61bb      	str	r3, [r7, #24]

#endif

	MCAL_SPI_Init(SPI1, &spi_cnfg);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4619      	mov	r1, r3
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x90>)
 800026a:	f000 fa81 	bl	8000770 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <main+0x90>)
 8000270:	f000 fb2e 	bl	80008d0 <MCAL_SPI_GPIO_Set_Pins>



	while(1){
 8000274:	e7fe      	b.n	8000274 <main+0x80>
 8000276:	bf00      	nop
 8000278:	080001e9 	.word	0x080001e9
 800027c:	40013800 	.word	0x40013800
 8000280:	080001a5 	.word	0x080001a5
 8000284:	40013000 	.word	0x40013000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 fded 	bl	8000e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff9b 	bl	80001f4 <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000f14 	.word	0x08000f14
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	2000007c 	.word	0x2000007c

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <EXTI0_IRQHandler>:

//================== ISR Functions==========================================


void EXTI0_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<0);
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[0]();
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI0_IRQHandler+0x20>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4798      	blx	r3
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400
 80002fc:	20000040 	.word	0x20000040

08000300 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI1_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI1_IRQHandler+0x1c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[1]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI1_IRQHandler+0x20>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4798      	blx	r3
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	20000040 	.word	0x20000040

08000324 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[2]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI2_IRQHandler+0x20>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4798      	blx	r3
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	20000040 	.word	0x20000040

08000348 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[3]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI3_IRQHandler+0x20>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4798      	blx	r3
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	20000040 	.word	0x20000040

0800036c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[4]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI4_IRQHandler+0x20>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	20000040 	.word	0x20000040

08000390 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler  (void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )   {EXTI->PR |=    (1<<5);     Gp_IRQ_Callback[5](); }
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x22>
 80003a0:	4b23      	ldr	r3, [pc, #140]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )   {EXTI->PR |=    (1<<6);     Gp_IRQ_Callback[6](); }
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d008      	beq.n	80003d0 <EXTI9_5_IRQHandler+0x40>
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4798      	blx	r3
	if(EXTI->PR & 1<<7)    {EXTI->PR |=    (1<<7);      Gp_IRQ_Callback[7](); }
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d008      	beq.n	80003ee <EXTI9_5_IRQHandler+0x5e>
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )   {EXTI->PR |=    (1<<8);     Gp_IRQ_Callback[8](); }
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d008      	beq.n	800040c <EXTI9_5_IRQHandler+0x7c>
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000408:	6a1b      	ldr	r3, [r3, #32]
 800040a:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )   {EXTI->PR |=    (1<<9);     Gp_IRQ_Callback[9](); }
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI9_5_IRQHandler+0x9a>
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4798      	blx	r3
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	20000040 	.word	0x20000040

08000438 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 )   {EXTI->PR |=    (1<<10);     Gp_IRQ_Callback[10](); }
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <EXTI15_10_IRQHandler+0x22>
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a29      	ldr	r2, [pc, #164]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000452:	6153      	str	r3, [r2, #20]
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000458:	4798      	blx	r3
	if(EXTI->PR & 1<<11 )   {EXTI->PR |=    (1<<11);     Gp_IRQ_Callback[11](); }
 800045a:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <EXTI15_10_IRQHandler+0x40>
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800046c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	4798      	blx	r3
	if(EXTI->PR & 1<<12 )   {EXTI->PR |=    (1<<12);     Gp_IRQ_Callback[12](); }
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d008      	beq.n	8000496 <EXTI15_10_IRQHandler+0x5e>
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048e:	6153      	str	r3, [r2, #20]
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4798      	blx	r3
	if(EXTI->PR & 1<<13 )   {EXTI->PR |=    (1<<13);     Gp_IRQ_Callback[13](); }
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d008      	beq.n	80004b4 <EXTI15_10_IRQHandler+0x7c>
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b2:	4798      	blx	r3
	if(EXTI->PR & 1<<14 )   {EXTI->PR |=    (1<<14);     Gp_IRQ_Callback[14](); }
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d008      	beq.n	80004d2 <EXTI15_10_IRQHandler+0x9a>
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6153      	str	r3, [r2, #20]
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d0:	4798      	blx	r3
	if(EXTI->PR & 1<<15 )   {EXTI->PR |=    (1<<15);     Gp_IRQ_Callback[15](); }
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <EXTI15_10_IRQHandler+0xb8>
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ee:	4798      	blx	r3
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000040 	.word	0x20000040

080004fc <GET_CRL_Position>:


#include "stm32_f103c6_GPIO.h"

uint8_t GET_CRL_Position(uint16_t PinNumber)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	2b80      	cmp	r3, #128	; 0x80
 800050a:	d042      	beq.n	8000592 <GET_CRL_Position+0x96>
 800050c:	2b80      	cmp	r3, #128	; 0x80
 800050e:	dc11      	bgt.n	8000534 <GET_CRL_Position+0x38>
 8000510:	2b08      	cmp	r3, #8
 8000512:	d036      	beq.n	8000582 <GET_CRL_Position+0x86>
 8000514:	2b08      	cmp	r3, #8
 8000516:	dc06      	bgt.n	8000526 <GET_CRL_Position+0x2a>
 8000518:	2b02      	cmp	r3, #2
 800051a:	d02e      	beq.n	800057a <GET_CRL_Position+0x7e>
 800051c:	2b04      	cmp	r3, #4
 800051e:	d02e      	beq.n	800057e <GET_CRL_Position+0x82>
 8000520:	2b01      	cmp	r3, #1
 8000522:	d028      	beq.n	8000576 <GET_CRL_Position+0x7a>
 8000524:	e047      	b.n	80005b6 <GET_CRL_Position+0xba>
 8000526:	2b20      	cmp	r3, #32
 8000528:	d02f      	beq.n	800058a <GET_CRL_Position+0x8e>
 800052a:	2b40      	cmp	r3, #64	; 0x40
 800052c:	d02f      	beq.n	800058e <GET_CRL_Position+0x92>
 800052e:	2b10      	cmp	r3, #16
 8000530:	d029      	beq.n	8000586 <GET_CRL_Position+0x8a>
 8000532:	e040      	b.n	80005b6 <GET_CRL_Position+0xba>
 8000534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000538:	d033      	beq.n	80005a2 <GET_CRL_Position+0xa6>
 800053a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800053e:	dc09      	bgt.n	8000554 <GET_CRL_Position+0x58>
 8000540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000544:	d029      	beq.n	800059a <GET_CRL_Position+0x9e>
 8000546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800054a:	d028      	beq.n	800059e <GET_CRL_Position+0xa2>
 800054c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000550:	d021      	beq.n	8000596 <GET_CRL_Position+0x9a>
 8000552:	e030      	b.n	80005b6 <GET_CRL_Position+0xba>
 8000554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000558:	d027      	beq.n	80005aa <GET_CRL_Position+0xae>
 800055a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055e:	dc03      	bgt.n	8000568 <GET_CRL_Position+0x6c>
 8000560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000564:	d01f      	beq.n	80005a6 <GET_CRL_Position+0xaa>
 8000566:	e026      	b.n	80005b6 <GET_CRL_Position+0xba>
 8000568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800056c:	d01f      	beq.n	80005ae <GET_CRL_Position+0xb2>
 800056e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000572:	d01e      	beq.n	80005b2 <GET_CRL_Position+0xb6>
 8000574:	e01f      	b.n	80005b6 <GET_CRL_Position+0xba>
	{
	case GPIO_PIN0:
		return 0;
 8000576:	2300      	movs	r3, #0
 8000578:	e01e      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 800057a:	2304      	movs	r3, #4
 800057c:	e01c      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 800057e:	2308      	movs	r3, #8
 8000580:	e01a      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000582:	230c      	movs	r3, #12
 8000584:	e018      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 8000586:	2310      	movs	r3, #16
 8000588:	e016      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 800058a:	2314      	movs	r3, #20
 800058c:	e014      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 800058e:	2318      	movs	r3, #24
 8000590:	e012      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000592:	231c      	movs	r3, #28
 8000594:	e010      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 8000596:	2300      	movs	r3, #0
 8000598:	e00e      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 800059a:	2304      	movs	r3, #4
 800059c:	e00c      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 800059e:	2308      	movs	r3, #8
 80005a0:	e00a      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 80005a2:	230c      	movs	r3, #12
 80005a4:	e008      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 80005a6:	2310      	movs	r3, #16
 80005a8:	e006      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 80005aa:	2314      	movs	r3, #20
 80005ac:	e004      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 80005ae:	2318      	movs	r3, #24
 80005b0:	e002      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 80005b2:	231c      	movs	r3, #28
 80005b4:	e000      	b.n	80005b8 <GET_CRL_Position+0xbc>
		break;
	}
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t * pinconfig)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
	volatile uint32_t* config_register = NULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
	config_register= (pinconfig->GPIO_PinNumber<GPIO_PIN8)? &GPIOX->CRL : &GPIOX->CRH;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2bff      	cmp	r3, #255	; 0xff
 80005d6:	d801      	bhi.n	80005dc <MCAL_GPIO_Init+0x1a>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	e001      	b.n	80005e0 <MCAL_GPIO_Init+0x1e>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3304      	adds	r3, #4
 80005e0:	613b      	str	r3, [r7, #16]
	uint8_t pin_CRL_config = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRL_Position(pinconfig->GPIO_PinNumber);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff86 	bl	80004fc <GET_CRL_Position>
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	7bfa      	ldrb	r2, [r7, #15]
 80005fa:	210f      	movs	r1, #15
 80005fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000600:	43d2      	mvns	r2, r2
 8000602:	401a      	ands	r2, r3
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	601a      	str	r2, [r3, #0]


	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	2b07      	cmp	r3, #7
 800060e:	d00b      	beq.n	8000628 <MCAL_GPIO_Init+0x66>
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	2b06      	cmp	r3, #6
 8000616:	d007      	beq.n	8000628 <MCAL_GPIO_Init+0x66>
				(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 800061c:	2b05      	cmp	r3, #5
 800061e:	d003      	beq.n	8000628 <MCAL_GPIO_Init+0x66>
				(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d10e      	bne.n	8000646 <MCAL_GPIO_Init+0x84>
		{
				//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
				pin_CRL_config = (((pinconfig->GPIO_MODE-4) <<2) |  (pinconfig->GPIO_Output_Speed)) & 0x0F;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	3b04      	subs	r3, #4
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	b25a      	sxtb	r2, r3
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	b25b      	sxtb	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	75fb      	strb	r3, [r7, #23]
 8000644:	e02c      	b.n	80006a0 <MCAL_GPIO_Init+0xde>
		}

	//so ELSE the pin will be ###INPUT
	else{

		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <MCAL_GPIO_Init+0x94>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	789b      	ldrb	r3, [r3, #2]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d107      	bne.n	8000666 <MCAL_GPIO_Init+0xa4>
			{
				pin_CRL_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	75fb      	strb	r3, [r7, #23]
 8000664:	e01c      	b.n	80006a0 <MCAL_GPIO_Init+0xde>
			}
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	2b08      	cmp	r3, #8
 800066c:	d102      	bne.n	8000674 <MCAL_GPIO_Init+0xb2>
			{

				pin_CRL_config = (((GPIO_MODE_INPUT_FLOAT  << 2) | (0x0)) & 0x0F);
 800066e:	2304      	movs	r3, #4
 8000670:	75fb      	strb	r3, [r7, #23]
 8000672:	e015      	b.n	80006a0 <MCAL_GPIO_Init+0xde>
			}
		else{
					//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
					pin_CRL_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 8000674:	2308      	movs	r3, #8
 8000676:	75fb      	strb	r3, [r7, #23]

					//pin is PU
					if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d107      	bne.n	8000690 <MCAL_GPIO_Init+0xce>
					{
						//from TRM
						GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	8812      	ldrh	r2, [r2, #0]
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	e007      	b.n	80006a0 <MCAL_GPIO_Init+0xde>
					}
					//pin is PD
					else
					{
						//From TRM
						GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	8812      	ldrh	r2, [r2, #0]
 8000698:	43d2      	mvns	r2, r2
 800069a:	401a      	ands	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60da      	str	r2, [r3, #12]
					}
				}
			}

		(*config_register) |= (pin_CRL_config << pin_position);
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	7df9      	ldrb	r1, [r7, #23]
 80006a6:	7bfa      	ldrb	r2, [r7, #15]
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	431a      	orrs	r2, r3
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MCAL_RCC_GetSYSCLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512

const uint8_t AHB_Prescaler_Table[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch ((RCC->CFGR >> 2)&0b11){
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MCAL_RCC_GetSYSCLKFreq+0x30>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	089b      	lsrs	r3, r3, #2
 80006c6:	f003 0303 	and.w	r3, r3, #3
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d006      	beq.n	80006dc <MCAL_RCC_GetSYSCLKFreq+0x20>
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d302      	bcc.n	80006d8 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d004      	beq.n	80006e0 <MCAL_RCC_GetSYSCLKFreq+0x24>
 80006d6:	e005      	b.n	80006e4 <MCAL_RCC_GetSYSCLKFreq+0x28>

	case 0:
		return HSI_CLK;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 80006da:	e003      	b.n	80006e4 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 1:
		//todo need to calculate it (user should specify it)
		return HSE_CLK;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 80006de:	e001      	b.n	80006e4 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 2:
		//todo need to calculate it
		return 16000000;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 80006e2:	e7ff      	b.n	80006e4 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	}
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000
 80006f0:	007a1200 	.word	0x007a1200
 80006f4:	00f42400 	.word	0x00f42400

080006f8 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHB_Prescaler_Table[(RCC->CFGR >> 4)&0b111]);
 80006fc:	f7ff ffde 	bl	80006bc <MCAL_RCC_GetSYSCLKFreq>
 8000700:	4601      	mov	r1, r0
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	091b      	lsrs	r3, r3, #4
 8000708:	f003 0307 	and.w	r3, r3, #7
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <MCAL_RCC_GetHCLKFreq+0x24>)
 800070e:	5cd3      	ldrb	r3, [r2, r3]
 8000710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	08000efc 	.word	0x08000efc

08000720 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APB_Prescaler_Table[(RCC->CFGR >> 8)&0xF]);
 8000724:	f7ff ffe8 	bl	80006f8 <MCAL_RCC_GetHCLKFreq>
 8000728:	4601      	mov	r1, r0
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	f003 030f 	and.w	r3, r3, #15
 8000734:	4a03      	ldr	r2, [pc, #12]	; (8000744 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	08000ef4 	.word	0x08000ef4

08000748 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APB_Prescaler_Table[(RCC->CFGR >> 11)&0b111]);
 800074c:	f7ff ffd4 	bl	80006f8 <MCAL_RCC_GetHCLKFreq>
 8000750:	4601      	mov	r1, r0
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	0adb      	lsrs	r3, r3, #11
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000764:	4618      	mov	r0, r3
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	08000ef4 	.word	0x08000ef4

08000770 <MCAL_SPI_Init>:
 * @retval		 -none
 * Note			 -Support for SPI Full Duplex Master/Slave & NSS HW/SW
 * 				 -In Case of Master you have to Configure pin and drive it.
 */
void MCAL_SPI_Init(SPI_TypeDef* SPIx, SPI_config* SPI_cfg)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	//Safety for registers to put the result in the original register at the end
	uint16_t temp_reg_CR1 = 0 ;
 800077a:	2300      	movs	r3, #0
 800077c:	81fb      	strh	r3, [r7, #14]
	uint16_t temp_reg_CR2 = 0 ;
 800077e:	2300      	movs	r3, #0
 8000780:	81bb      	strh	r3, [r7, #12]
	if(SPIx==SPI1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a38      	ldr	r2, [pc, #224]	; (8000868 <MCAL_SPI_Init+0xf8>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d108      	bne.n	800079c <MCAL_SPI_Init+0x2c>
	{
		RCC_SPI1_CLK_EN();
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <MCAL_SPI_Init+0xfc>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <MCAL_SPI_Init+0xfc>)
 8000790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000794:	6193      	str	r3, [r2, #24]
		Global_SPI_Config[SPI1_INDEX]=SPI_cfg;
 8000796:	4a36      	ldr	r2, [pc, #216]	; (8000870 <MCAL_SPI_Init+0x100>)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	6013      	str	r3, [r2, #0]

	}
	if(SPIx==SPI2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a35      	ldr	r2, [pc, #212]	; (8000874 <MCAL_SPI_Init+0x104>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d108      	bne.n	80007b6 <MCAL_SPI_Init+0x46>
	{
		RCC_SPI2_CLK_EN();
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <MCAL_SPI_Init+0xfc>)
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	4a30      	ldr	r2, [pc, #192]	; (800086c <MCAL_SPI_Init+0xfc>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	61d3      	str	r3, [r2, #28]
		Global_SPI_Config[SPI2_INDEX]=SPI_cfg;
 80007b0:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <MCAL_SPI_Init+0x100>)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	6053      	str	r3, [r2, #4]
	}

	//enable SPI
	temp_reg_CR1 = (1<<6);
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	81fb      	strh	r3, [r7, #14]

	//-----------all of the following configs corresponding bits in the registers are already done in the reference macros---------
	temp_reg_CR1 |= SPI_cfg->Device_Mode;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Comm_Mode;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	885a      	ldrh	r2, [r3, #2]
 80007c8:	89fb      	ldrh	r3, [r7, #14]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Frame_Format;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	889a      	ldrh	r2, [r3, #4]
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Data_size;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	88da      	ldrh	r2, [r3, #6]
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	4313      	orrs	r3, r2
 80007e0:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Clock_Polarity;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	891a      	ldrh	r2, [r3, #8]
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Clock_Phase;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	895a      	ldrh	r2, [r3, #10]
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->SPI_Clock_Freq;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	89da      	ldrh	r2, [r3, #14]
 80007fa:	89fb      	ldrh	r3, [r7, #14]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	81fb      	strh	r3, [r7, #14]

	//config NSS
	if(SPI_cfg->NSS==SPI_NSS_HARDWARE_MASTER_SS_OUTPUT_ENABLE)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	899b      	ldrh	r3, [r3, #12]
 8000804:	2b04      	cmp	r3, #4
 8000806:	d105      	bne.n	8000814 <MCAL_SPI_Init+0xa4>
	{
		temp_reg_CR2|= SPI_cfg->NSS;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	899a      	ldrh	r2, [r3, #12]
 800080c:	89bb      	ldrh	r3, [r7, #12]
 800080e:	4313      	orrs	r3, r2
 8000810:	81bb      	strh	r3, [r7, #12]
 8000812:	e004      	b.n	800081e <MCAL_SPI_Init+0xae>
	{
		temp_reg_CR2 &=  SPI_cfg->NSS;
	}
	else
	{
		temp_reg_CR1|= SPI_cfg->NSS;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	899a      	ldrh	r2, [r3, #12]
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	4313      	orrs	r3, r2
 800081c:	81fb      	strh	r3, [r7, #14]
	}
	//=======================================================
	//IRQ

	if(SPI_cfg->IRQ_Enable != SPI_IRQ_ENABLE_NONE){
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	8a1b      	ldrh	r3, [r3, #16]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d015      	beq.n	8000852 <MCAL_SPI_Init+0xe2>
		temp_reg_CR2 |= SPI_cfg->IRQ_Enable;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	8a1a      	ldrh	r2, [r3, #16]
 800082a:	89bb      	ldrh	r3, [r7, #12]
 800082c:	4313      	orrs	r3, r2
 800082e:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <MCAL_SPI_Init+0xf8>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <MCAL_SPI_Init+0xd6>
			NVIC_IRQ35_SPI1_enable();
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MCAL_SPI_Init+0x108>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <MCAL_SPI_Init+0x108>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	e005      	b.n	8000852 <MCAL_SPI_Init+0xe2>
		}
		else{
			NVIC_IRQ36_SPI2_enable();
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MCAL_SPI_Init+0x108>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <MCAL_SPI_Init+0x108>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = temp_reg_CR1;
 8000852:	89fa      	ldrh	r2, [r7, #14]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = temp_reg_CR2;
 8000858:	89ba      	ldrh	r2, [r7, #12]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	605a      	str	r2, [r3, #4]

}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40013000 	.word	0x40013000
 800086c:	40021000 	.word	0x40021000
 8000870:	2000001c 	.word	0x2000001c
 8000874:	40003800 	.word	0x40003800
 8000878:	e000e104 	.word	0xe000e104

0800087c <MCAL_SPI_TX_RX>:
	}

	*Data = SPIx->DR;
}

void MCAL_SPI_TX_RX(SPI_TypeDef* SPIx, uint16_t* Data, enum Polling_Mechanismm PollingEN ){
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	4613      	mov	r3, r2
 8000888:	71fb      	strb	r3, [r7, #7]

	if(PollingEN == pollingenable){
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d106      	bne.n	800089e <MCAL_SPI_TX_RX+0x22>
		while(!((SPIx->SR) & SPI_SR_TXE));
 8000890:	bf00      	nop
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f9      	beq.n	8000892 <MCAL_SPI_TX_RX+0x16>
	}

	SPIx->DR = *Data;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]

	if(PollingEN == pollingenable){
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d106      	bne.n	80008bc <MCAL_SPI_TX_RX+0x40>
		while(!((SPIx->SR) & SPI_SR_RXNE));
 80008ae:	bf00      	nop
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f9      	beq.n	80008b0 <MCAL_SPI_TX_RX+0x34>
	}

	*Data = SPIx->DR;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	801a      	strh	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <MCAL_SPI_GPIO_Set_Pins>:



void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef* SPIx){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t pin_cfg;

	if(SPIx==SPI1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a71      	ldr	r2, [pc, #452]	; (8000aa0 <MCAL_SPI_GPIO_Set_Pins+0x1d0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d169      	bne.n	80009b4 <MCAL_SPI_GPIO_Set_Pins+0xe4>
	{
		//   PA4:NSS
		//   PA5:SCK
		//   PA6:MISO
		//	 PA7:MOSI
		if(Global_SPI_Config[SPI1_INDEX]->Device_Mode==SPI_DEVICE_MODE_MASTER)
 80008e0:	4b70      	ldr	r3, [pc, #448]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x1d4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d134      	bne.n	8000954 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			switch(Global_SPI_Config[SPI1_INDEX]->NSS)
 80008ea:	4b6e      	ldr	r3, [pc, #440]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x1d4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	899b      	ldrh	r3, [r3, #12]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d10c      	bne.n	800090e <MCAL_SPI_GPIO_Set_Pins+0x3e>

				break;


			case SPI_NSS_HARDWARE_MASTER_SS_OUTPUT_ENABLE:
				pin_cfg.GPIO_PinNumber =GPIO_PIN4;
 80008f4:	2310      	movs	r3, #16
 80008f6:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80008f8:	2306      	movs	r3, #6
 80008fa:	72bb      	strb	r3, [r7, #10]
				pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80008fc:	2301      	movs	r3, #1
 80008fe:	72fb      	strb	r3, [r7, #11]
				MCAL_GPIO_Init(GPIOA , &pin_cfg);
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	4619      	mov	r1, r3
 8000906:	4868      	ldr	r0, [pc, #416]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000908:	f7ff fe5b 	bl	80005c2 <MCAL_GPIO_Init>
				break;
 800090c:	bf00      	nop
			}

			//PA5: SCLK
			pin_cfg.GPIO_PinNumber =GPIO_PIN5;
 800090e:	2320      	movs	r3, #32
 8000910:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000912:	2306      	movs	r3, #6
 8000914:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000916:	2301      	movs	r3, #1
 8000918:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	4861      	ldr	r0, [pc, #388]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000922:	f7ff fe4e 	bl	80005c2 <MCAL_GPIO_Init>


			//PA6: MISO
			//full duplex
			pin_cfg.GPIO_PinNumber =GPIO_PIN6;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 800092a:	2301      	movs	r3, #1
 800092c:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4619      	mov	r1, r3
 8000934:	485c      	ldr	r0, [pc, #368]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000936:	f7ff fe44 	bl	80005c2 <MCAL_GPIO_Init>


			//PA7: MOSI
			//full duplex
			pin_cfg.GPIO_PinNumber =GPIO_PIN7;
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 800093e:	2306      	movs	r3, #6
 8000940:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000942:	2301      	movs	r3, #1
 8000944:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4619      	mov	r1, r3
 800094c:	4856      	ldr	r0, [pc, #344]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 800094e:	f7ff fe38 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
		}
	}

}
 8000952:	e0a0      	b.n	8000a96 <MCAL_SPI_GPIO_Set_Pins+0x1c6>
			if(Global_SPI_Config[SPI1_INDEX]->NSS== SPI_NSS_HARDWARE_SLAVE){
 8000954:	4b53      	ldr	r3, [pc, #332]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x1d4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	899b      	ldrh	r3, [r3, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d109      	bne.n	8000972 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				pin_cfg.GPIO_PinNumber =GPIO_PIN4;
 800095e:	2310      	movs	r3, #16
 8000960:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000962:	2301      	movs	r3, #1
 8000964:	72bb      	strb	r3, [r7, #10]
				MCAL_GPIO_Init(GPIOA , &pin_cfg);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4619      	mov	r1, r3
 800096c:	484e      	ldr	r0, [pc, #312]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 800096e:	f7ff fe28 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN5;
 8000972:	2320      	movs	r3, #32
 8000974:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000976:	2301      	movs	r3, #1
 8000978:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	4849      	ldr	r0, [pc, #292]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000982:	f7ff fe1e 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN6;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 800098a:	2306      	movs	r3, #6
 800098c:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800098e:	2301      	movs	r3, #1
 8000990:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	4843      	ldr	r0, [pc, #268]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 800099a:	f7ff fe12 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN7;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 80009a2:	2301      	movs	r3, #1
 80009a4:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	483e      	ldr	r0, [pc, #248]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80009ae:	f7ff fe08 	bl	80005c2 <MCAL_GPIO_Init>
}
 80009b2:	e070      	b.n	8000a96 <MCAL_SPI_GPIO_Set_Pins+0x1c6>
		SPI_config *spi_cfg = Global_SPI_Config[SPI2_INDEX];
 80009b4:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <MCAL_SPI_GPIO_Set_Pins+0x1d4>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	60fb      	str	r3, [r7, #12]
		if(spi_cfg->Device_Mode == SPI_DEVICE_MODE_MASTER){
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d137      	bne.n	8000a32 <MCAL_SPI_GPIO_Set_Pins+0x162>
			switch(spi_cfg->NSS){
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	899b      	ldrh	r3, [r3, #12]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d10d      	bne.n	80009e6 <MCAL_SPI_GPIO_Set_Pins+0x116>
				pin_cfg.GPIO_PinNumber =GPIO_PIN12;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80009d0:	2306      	movs	r3, #6
 80009d2:	72bb      	strb	r3, [r7, #10]
				pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80009d4:	2301      	movs	r3, #1
 80009d6:	72fb      	strb	r3, [r7, #11]
				MCAL_GPIO_Init(GPIOB , &pin_cfg);
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4619      	mov	r1, r3
 80009de:	4833      	ldr	r0, [pc, #204]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009e0:	f7ff fdef 	bl	80005c2 <MCAL_GPIO_Init>
				break;
 80009e4:	bf00      	nop
			pin_cfg.GPIO_PinNumber =GPIO_PIN13;
 80009e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ea:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80009ec:	2306      	movs	r3, #6
 80009ee:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80009f0:	2301      	movs	r3, #1
 80009f2:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4619      	mov	r1, r3
 80009fa:	482c      	ldr	r0, [pc, #176]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009fc:	f7ff fde1 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN14;
 8000a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a04:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000a06:	2301      	movs	r3, #1
 8000a08:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4826      	ldr	r0, [pc, #152]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a12:	f7ff fdd6 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN15;
 8000a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1a:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000a20:	2301      	movs	r3, #1
 8000a22:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4820      	ldr	r0, [pc, #128]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a2c:	f7ff fdc9 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000a30:	e031      	b.n	8000a96 <MCAL_SPI_GPIO_Set_Pins+0x1c6>
			if(spi_cfg->NSS == SPI_NSS_HARDWARE_SLAVE){
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	899b      	ldrh	r3, [r3, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10a      	bne.n	8000a50 <MCAL_SPI_GPIO_Set_Pins+0x180>
				pin_cfg.GPIO_PinNumber =GPIO_PIN12;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000a40:	2301      	movs	r3, #1
 8000a42:	72bb      	strb	r3, [r7, #10]
				MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a4c:	f7ff fdb9 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN13;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000a56:	2301      	movs	r3, #1
 8000a58:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a62:	f7ff fdae 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN14;
 8000a66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a6a:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000a70:	2301      	movs	r3, #1
 8000a72:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a7c:	f7ff fda1 	bl	80005c2 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN15;
 8000a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a84:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000a86:	2301      	movs	r3, #1
 8000a88:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a92:	f7ff fd96 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40013000 	.word	0x40013000
 8000aa4:	2000001c 	.word	0x2000001c
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SR  & (1<<1)) >>1  ) ;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <SPI1_IRQHandler+0x54>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	085b      	lsrs	r3, r3, #1
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	793b      	ldrb	r3, [r7, #4]
 8000ac4:	f362 0300 	bfi	r3, r2, #0, #1
 8000ac8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SR  & (1<<0)) >> 0 ) ;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <SPI1_IRQHandler+0x54>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	793b      	ldrb	r3, [r7, #4]
 8000ad6:	f362 0341 	bfi	r3, r2, #1, #1
 8000ada:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SR  & (1<<4)) >> 4 ) ;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <SPI1_IRQHandler+0x54>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	091b      	lsrs	r3, r3, #4
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	793b      	ldrb	r3, [r7, #4]
 8000aea:	f362 0382 	bfi	r3, r2, #2, #1
 8000aee:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_Callback(irq_src);
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SPI1_IRQHandler+0x58>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	7938      	ldrb	r0, [r7, #4]
 8000af8:	4798      	blx	r3
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40013000 	.word	0x40013000
 8000b08:	2000001c 	.word	0x2000001c

08000b0c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI2->SR  & (1<<1)) >> 1 ) ;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <SPI2_IRQHandler+0x54>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	085b      	lsrs	r3, r3, #1
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	793b      	ldrb	r3, [r7, #4]
 8000b20:	f362 0300 	bfi	r3, r2, #0, #1
 8000b24:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SR  & (1<<0)) >> 0 ) ;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <SPI2_IRQHandler+0x54>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	793b      	ldrb	r3, [r7, #4]
 8000b32:	f362 0341 	bfi	r3, r2, #1, #1
 8000b36:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SR  & (1<<4)) >> 4 ) ;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <SPI2_IRQHandler+0x54>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	091b      	lsrs	r3, r3, #4
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	793b      	ldrb	r3, [r7, #4]
 8000b46:	f362 0382 	bfi	r3, r2, #2, #1
 8000b4a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_Callback(irq_src);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SPI2_IRQHandler+0x58>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	7938      	ldrb	r0, [r7, #4]
 8000b54:	4798      	blx	r3
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40003800 	.word	0x40003800
 8000b64:	2000001c 	.word	0x2000001c

08000b68 <MCAL_USART_Init>:
 * @brief                -initialize the USARTX pin  to a specified parameters
 * @param [in]           -USARTX where x can be (USARTX1 USARTX2 USART3)
 * @retval               - null
 * Note                  -null
 */
void MCAL_USART_Init(USART_TypeDef* USARTx, USART_config* USART_cfg){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;

	if(USARTx==USART1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a55      	ldr	r2, [pc, #340]	; (8000ccc <MCAL_USART_Init+0x164>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d109      	bne.n	8000b8e <MCAL_USART_Init+0x26>
	{
		Global_USART_Config[0]=USART_cfg;
 8000b7a:	4a55      	ldr	r2, [pc, #340]	; (8000cd0 <MCAL_USART_Init+0x168>)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 8000b80:	4b54      	ldr	r3, [pc, #336]	; (8000cd4 <MCAL_USART_Init+0x16c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a53      	ldr	r2, [pc, #332]	; (8000cd4 <MCAL_USART_Init+0x16c>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	e016      	b.n	8000bbc <MCAL_USART_Init+0x54>
	}
	else if(USARTx == USART2){
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a51      	ldr	r2, [pc, #324]	; (8000cd8 <MCAL_USART_Init+0x170>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d109      	bne.n	8000baa <MCAL_USART_Init+0x42>
		Global_USART_Config[1] = USART_cfg;
 8000b96:	4a4e      	ldr	r2, [pc, #312]	; (8000cd0 <MCAL_USART_Init+0x168>)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6053      	str	r3, [r2, #4]
		RCC_USART2_CLK_EN();
 8000b9c:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <MCAL_USART_Init+0x16c>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a4c      	ldr	r2, [pc, #304]	; (8000cd4 <MCAL_USART_Init+0x16c>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	e008      	b.n	8000bbc <MCAL_USART_Init+0x54>
	}
	else{
		Global_USART_Config[2] = USART_cfg;
 8000baa:	4a49      	ldr	r2, [pc, #292]	; (8000cd0 <MCAL_USART_Init+0x168>)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6093      	str	r3, [r2, #8]
		RCC_USART3_CLK_EN();
 8000bb0:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <MCAL_USART_Init+0x16c>)
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	4a47      	ldr	r2, [pc, #284]	; (8000cd4 <MCAL_USART_Init+0x16c>)
 8000bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bba:	61d3      	str	r3, [r2, #28]
	}
	//enable USART module
	USARTx->CR1 |= 1<<13;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	60da      	str	r2, [r3, #12]

	//-----------all of the following configs corresponding bits in the registers are already done in the reference macros---------

	//enable TX/RX according to config
	USARTx->CR1 |= USART_cfg->USART_MODE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60da      	str	r2, [r3, #12]

	//payload length
	USARTx->CR1 |= USART_cfg->Payload_length;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	7a12      	ldrb	r2, [r2, #8]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60da      	str	r2, [r3, #12]

	//parity bits
	USARTx->CR1 |= USART_cfg->Parity;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	7a52      	ldrb	r2, [r2, #9]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60da      	str	r2, [r3, #12]

	//stop bits
	USARTx->CR2 |= USART_cfg->Stop_bits;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	7a92      	ldrb	r2, [r2, #10]
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]

	//control flow
	USARTx->CR3 |= USART_cfg->HW_Flow_Control;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	7ad2      	ldrb	r2, [r2, #11]
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	615a      	str	r2, [r3, #20]

	//------------------------------------Baud rate configuration------------------------------------------------
	//PCLK1 for USART2,3
	//PCLK2 for USART1

	if(USARTx == USART1){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <MCAL_USART_Init+0x164>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d103      	bne.n	8000c1e <MCAL_USART_Init+0xb6>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000c16:	f7ff fd97 	bl	8000748 <MCAL_RCC_GetPCLK2Freq>
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	e002      	b.n	8000c24 <MCAL_USART_Init+0xbc>
	}
	else{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000c1e:	f7ff fd7f 	bl	8000720 <MCAL_RCC_GetPCLK1Freq>
 8000c22:	60f8      	str	r0, [r7, #12]
	}
	//details in @ref Baud rate calculation
	BRR = USART_BRR_Register(pclk,USART_cfg->Baud_rate);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	0119      	lsls	r1, r3, #4
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	009a      	lsls	r2, r3, #2
 8000c3c:	441a      	add	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c54:	2064      	movs	r0, #100	; 0x64
 8000c56:	fb00 f303 	mul.w	r3, r0, r3
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <MCAL_USART_Init+0x174>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	095b      	lsrs	r3, r3, #5
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	609a      	str	r2, [r3, #8]
	//-------------------------------------------------------------------------------------------------------------		\
	//Enable/Disable interrupt

	if(USART_cfg->IRQ_Enable != USART_IRQ_ENABLE_NONE){
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d022      	beq.n	8000cc2 <MCAL_USART_Init+0x15a>
		USARTx->CR1 |= (USART_cfg->IRQ_Enable);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	7b12      	ldrb	r2, [r2, #12]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60da      	str	r2, [r3, #12]

		//enable NVIC for USARTx
		if(USARTx == USART1){
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <MCAL_USART_Init+0x164>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d106      	bne.n	8000ca0 <MCAL_USART_Init+0x138>
			NVIC_IRQ37_USART1_enable();
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MCAL_USART_Init+0x178>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MCAL_USART_Init+0x178>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	6013      	str	r3, [r2, #0]
		}
		else{
			NVIC_IRQ39_USART3_enable();
		}
	}
}
 8000c9e:	e010      	b.n	8000cc2 <MCAL_USART_Init+0x15a>
		else if(USARTx == USART2){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <MCAL_USART_Init+0x170>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d106      	bne.n	8000cb6 <MCAL_USART_Init+0x14e>
			NVIC_IRQ38_USART2_enable();
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <MCAL_USART_Init+0x178>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <MCAL_USART_Init+0x178>)
 8000cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	e005      	b.n	8000cc2 <MCAL_USART_Init+0x15a>
			NVIC_IRQ39_USART3_enable();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MCAL_USART_Init+0x178>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <MCAL_USART_Init+0x178>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	6013      	str	r3, [r2, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40013800 	.word	0x40013800
 8000cd0:	20000024 	.word	0x20000024
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	51eb851f 	.word	0x51eb851f
 8000ce0:	e000e104 	.word	0xe000e104

08000ce4 <MCAL_USART_Send_Data>:
		NVIC_IRQ39_USART3_disable();
	}

}

void MCAL_USART_Send_Data(USART_TypeDef* USARTx, uint16_t* Data, enum Polling_Mechanism PollingEN ){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	71fb      	strb	r3, [r7, #7]

	USART_config* USART_CFG = NULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1){
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <MCAL_USART_Send_Data+0x78>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d103      	bne.n	8000d06 <MCAL_USART_Send_Data+0x22>
		USART_CFG = Global_USART_Config[0];
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MCAL_USART_Send_Data+0x7c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <MCAL_USART_Send_Data+0x38>
	}
	else if(USARTx == USART2){
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <MCAL_USART_Send_Data+0x80>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d103      	bne.n	8000d16 <MCAL_USART_Send_Data+0x32>
		USART_CFG = Global_USART_Config[1];
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MCAL_USART_Send_Data+0x7c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e002      	b.n	8000d1c <MCAL_USART_Send_Data+0x38>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MCAL_USART_Send_Data+0x7c>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	617b      	str	r3, [r7, #20]
	}
	//check if TXE is set in SR
	if(PollingEN == enable){
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d106      	bne.n	8000d30 <MCAL_USART_Send_Data+0x4c>
		while(!(USARTx->SR & 1<<7));
 8000d22:	bf00      	nop
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0f9      	beq.n	8000d24 <MCAL_USART_Send_Data+0x40>
	}

	//check payload length
	if(USART_CFG->Payload_length == USART_Payload_Length_8){
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	7a1b      	ldrb	r3, [r3, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d105      	bne.n	8000d44 <MCAL_USART_Send_Data+0x60>
		USARTx->DR = (*Data & (uint8_t)0xFF);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	605a      	str	r2, [r3, #4]
	}
	else{
		USARTx->DR = (*Data & (uint16_t)0x1FF);
	}
}
 8000d42:	e005      	b.n	8000d50 <MCAL_USART_Send_Data+0x6c>
		USARTx->DR = (*Data & (uint16_t)0x1FF);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	605a      	str	r2, [r3, #4]
}
 8000d50:	bf00      	nop
 8000d52:	371c      	adds	r7, #28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	20000024 	.word	0x20000024
 8000d64:	40004400 	.word	0x40004400

08000d68 <MCAL_USART_GPIO_Set_Pins>:

	//wait till TC flag is set in SR
	while(!(USARTx->SR & 1<<6));
}

void MCAL_USART_GPIO_Set_Pins(USART_TypeDef* USARTx){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	USART_config* USART_CFG = NULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
	if(USARTx == USART1){
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a33      	ldr	r2, [pc, #204]	; (8000e44 <MCAL_USART_GPIO_Set_Pins+0xdc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d103      	bne.n	8000d84 <MCAL_USART_GPIO_Set_Pins+0x1c>
		USART_CFG = Global_USART_Config[0];
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <MCAL_USART_GPIO_Set_Pins+0xe0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e00a      	b.n	8000d9a <MCAL_USART_GPIO_Set_Pins+0x32>
	}
	else if(USARTx == USART2){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <MCAL_USART_GPIO_Set_Pins+0xe4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d103      	bne.n	8000d94 <MCAL_USART_GPIO_Set_Pins+0x2c>
		USART_CFG = Global_USART_Config[1];
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <MCAL_USART_GPIO_Set_Pins+0xe0>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e002      	b.n	8000d9a <MCAL_USART_GPIO_Set_Pins+0x32>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 8000d94:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <MCAL_USART_GPIO_Set_Pins+0xe0>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	60fb      	str	r3, [r7, #12]
	}


	GPIO_PinConfig_t USART_pincfg;

	if(USARTx == USART1){
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a29      	ldr	r2, [pc, #164]	; (8000e44 <MCAL_USART_GPIO_Set_Pins+0xdc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d118      	bne.n	8000dd4 <MCAL_USART_GPIO_Set_Pins+0x6c>
		//PA9->TX, PA10-> RX, PA11-> CTS, PA12-> RTS

		//PA9 TX
		USART_pincfg.GPIO_PinNumber =GPIO_PIN9;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000da8:	2306      	movs	r3, #6
 8000daa:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000dac:	2301      	movs	r3, #1
 8000dae:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	4826      	ldr	r0, [pc, #152]	; (8000e50 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000db8:	f7ff fc03 	bl	80005c2 <MCAL_GPIO_Init>

		//PA10 RX
		USART_pincfg.GPIO_PinNumber =GPIO_PIN10;
 8000dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc0:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4820      	ldr	r0, [pc, #128]	; (8000e50 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000dce:	f7ff fbf8 	bl	80005c2 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB , &USART_pincfg);

		}

	}
}
 8000dd2:	e032      	b.n	8000e3a <MCAL_USART_GPIO_Set_Pins+0xd2>
	else if(USARTx == USART2){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <MCAL_USART_GPIO_Set_Pins+0xe4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d116      	bne.n	8000e0a <MCAL_USART_GPIO_Set_Pins+0xa2>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN2;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000de0:	2306      	movs	r3, #6
 8000de2:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000de4:	2301      	movs	r3, #1
 8000de6:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4619      	mov	r1, r3
 8000dee:	4818      	ldr	r0, [pc, #96]	; (8000e50 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000df0:	f7ff fbe7 	bl	80005c2 <MCAL_GPIO_Init>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN3;
 8000df4:	2308      	movs	r3, #8
 8000df6:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4619      	mov	r1, r3
 8000e02:	4813      	ldr	r0, [pc, #76]	; (8000e50 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000e04:	f7ff fbdd 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000e08:	e017      	b.n	8000e3a <MCAL_USART_GPIO_Set_Pins+0xd2>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN10;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0e:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000e10:	2306      	movs	r3, #6
 8000e12:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000e14:	2301      	movs	r3, #1
 8000e16:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOB , &USART_pincfg);
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MCAL_USART_GPIO_Set_Pins+0xec>)
 8000e20:	f7ff fbcf 	bl	80005c2 <MCAL_GPIO_Init>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN11;
 8000e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e28:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOB , &USART_pincfg);
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MCAL_USART_GPIO_Set_Pins+0xec>)
 8000e36:	f7ff fbc4 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40013800 	.word	0x40013800
 8000e48:	20000024 	.word	0x20000024
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_Callback();
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <USART1_IRQHandler+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	4798      	blx	r3

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000024 	.word	0x20000024

08000e6c <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_Callback();
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <USART2_IRQHandler+0x10>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	4798      	blx	r3

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000024 	.word	0x20000024

08000e80 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_Callback();
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <USART3_IRQHandler+0x10>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	4798      	blx	r3

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000024 	.word	0x20000024

08000e94 <__libc_init_array>:
 8000e94:	b570      	push	{r4, r5, r6, lr}
 8000e96:	2500      	movs	r5, #0
 8000e98:	4e0c      	ldr	r6, [pc, #48]	; (8000ecc <__libc_init_array+0x38>)
 8000e9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ed0 <__libc_init_array+0x3c>)
 8000e9c:	1ba4      	subs	r4, r4, r6
 8000e9e:	10a4      	asrs	r4, r4, #2
 8000ea0:	42a5      	cmp	r5, r4
 8000ea2:	d109      	bne.n	8000eb8 <__libc_init_array+0x24>
 8000ea4:	f000 f81a 	bl	8000edc <_init>
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	4e0a      	ldr	r6, [pc, #40]	; (8000ed4 <__libc_init_array+0x40>)
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <__libc_init_array+0x44>)
 8000eae:	1ba4      	subs	r4, r4, r6
 8000eb0:	10a4      	asrs	r4, r4, #2
 8000eb2:	42a5      	cmp	r5, r4
 8000eb4:	d105      	bne.n	8000ec2 <__libc_init_array+0x2e>
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ebc:	4798      	blx	r3
 8000ebe:	3501      	adds	r5, #1
 8000ec0:	e7ee      	b.n	8000ea0 <__libc_init_array+0xc>
 8000ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec6:	4798      	blx	r3
 8000ec8:	3501      	adds	r5, #1
 8000eca:	e7f2      	b.n	8000eb2 <__libc_init_array+0x1e>
 8000ecc:	08000f0c 	.word	0x08000f0c
 8000ed0:	08000f0c 	.word	0x08000f0c
 8000ed4:	08000f0c 	.word	0x08000f0c
 8000ed8:	08000f10 	.word	0x08000f10

08000edc <_init>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	bf00      	nop
 8000ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ee2:	bc08      	pop	{r3}
 8000ee4:	469e      	mov	lr, r3
 8000ee6:	4770      	bx	lr

08000ee8 <_fini>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr
