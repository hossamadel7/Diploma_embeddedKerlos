
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000e08  08000e08  00010e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e3c  08000e3c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08000e3c  08000e3c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e3c  08000e3c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e3c  08000e3c  00010e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e40  08000e40  00010e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000040  08000e84  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08000e84  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e99  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a22  00000000  00000000  00023f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009dc  00000000  00000000  00024924  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b8  00000000  00000000  00025300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  000254b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000024d6  00000000  00000000  00025618  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020de  00000000  00000000  00027aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000094a6  00000000  00000000  00029bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00033072  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000538  00000000  00000000  000330f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000040 	.word	0x20000040
 800014c:	00000000 	.word	0x00000000
 8000150:	08000df0 	.word	0x08000df0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000044 	.word	0x20000044
 800016c:	08000df0 	.word	0x08000df0

08000170 <clock_init>:
#include "stm32_f103c6_EXTI.h"

int flag;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <EXTI9_Callback>:



void EXTI9_Callback(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	flag=1;
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <EXTI9_Callback+0x20>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ9 has happened");
 80001ae:	4806      	ldr	r0, [pc, #24]	; (80001c8 <EXTI9_Callback+0x24>)
 80001b0:	f000 f9ea 	bl	8000588 <LCD_WRITE_STRING>
	my_wait_ms(1500);
 80001b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80001b8:	f000 fa12 	bl	80005e0 <my_wait_ms>
	LCD_clear_screen();
 80001bc:	f000 f8b2 	bl	8000324 <LCD_clear_screen>
}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	2000005c 	.word	0x2000005c
 80001c8:	08000e08 	.word	0x08000e08

080001cc <main>:

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
	clock_init();
 80001d2:	f7ff ffcd 	bl	8000170 <clock_init>
	LCD_INIT();
 80001d6:	f000 f8e7 	bl	80003a8 <LCD_INIT>
	KEYPAD_INIT();
 80001da:	f000 f85f 	bl	800029c <KEYPAD_INIT>
	LCD_clear_screen();
 80001de:	f000 f8a1 	bl	8000324 <LCD_clear_screen>
	LCD_WRITE_STRING("Hello");
 80001e2:	4814      	ldr	r0, [pc, #80]	; (8000234 <main+0x68>)
 80001e4:	f000 f9d0 	bl	8000588 <LCD_WRITE_STRING>
	my_wait_ms(1000);
 80001e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ec:	f000 f9f8 	bl	80005e0 <my_wait_ms>
	LCD_clear_screen();
 80001f0:	f000 f898 	bl	8000324 <LCD_clear_screen>

	//initialize EXTI
	EXTI_PinConfig_t EXTI_pincfg;
	EXTI_pincfg.EXTI_pin=EXTI9_PB9;
 80001f4:	4a10      	ldr	r2, [pc, #64]	; (8000238 <main+0x6c>)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80001fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_pincfg.trigger_case=EXTI_Rising;
 80001fe:	2300      	movs	r3, #0
 8000200:	743b      	strb	r3, [r7, #16]
	EXTI_pincfg.IRQ_define = EXTI_IRQ_enable;
 8000202:	2301      	movs	r3, #1
 8000204:	747b      	strb	r3, [r7, #17]
	EXTI_pincfg.P_IRQ_Callback = EXTI9_Callback;
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <main+0x70>)
 8000208:	617b      	str	r3, [r7, #20]

	MCAL_EXTI_GPIO_Init(&EXTI_pincfg);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fadf 	bl	80007d0 <MCAL_EXTI_GPIO_Init>

	while(1){
		if(flag){
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <main+0x74>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0fb      	beq.n	8000212 <main+0x46>
			LCD_WRITE_STRING("CPUUUUUUU");
 800021a:	480a      	ldr	r0, [pc, #40]	; (8000244 <main+0x78>)
 800021c:	f000 f9b4 	bl	8000588 <LCD_WRITE_STRING>
			my_wait_ms(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000224:	f000 f9dc 	bl	80005e0 <my_wait_ms>
			LCD_clear_screen();
 8000228:	f000 f87c 	bl	8000324 <LCD_clear_screen>
			flag = 0;
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <main+0x74>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
		if(flag){
 8000232:	e7ee      	b.n	8000212 <main+0x46>
 8000234:	08000e1c 	.word	0x08000e1c
 8000238:	08000e30 	.word	0x08000e30
 800023c:	080001a5 	.word	0x080001a5
 8000240:	2000005c 	.word	0x2000005c
 8000244:	08000e24 	.word	0x08000e24

08000248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <LoopForever+0x6>)
  ldr r1, =_edata
 8000252:	490d      	ldr	r1, [pc, #52]	; (8000288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000254:	4a0d      	ldr	r2, [pc, #52]	; (800028c <LoopForever+0xe>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000268:	4c0a      	ldr	r4, [pc, #40]	; (8000294 <LoopForever+0x16>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000276:	f000 fd97 	bl	8000da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f7ff ffa7 	bl	80001cc <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800028c:	08000e44 	.word	0x08000e44
  ldr r2, =_sbss
 8000290:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000294:	200000a0 	.word	0x200000a0

08000298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC1_2_IRQHandler>
	...

0800029c <KEYPAD_INIT>:
int Keypad_r[] = {R0, R1, R2, R3}; //rows of the keypad
int Keypad_c[] = {C0, C1, C2, C3};//columns

GPIO_PinConfig_t Pincfg;
void KEYPAD_INIT()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
	//	Data_dir &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
	Pincfg.GPIO_MODE=GPIO_MODE_INPUT_PU;
 80002a2:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <KEYPAD_INIT+0x78>)
 80002a4:	2202      	movs	r2, #2
 80002a6:	709a      	strb	r2, [r3, #2]
	int i;
	for(i=0;i<4;i++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	e00d      	b.n	80002ca <KEYPAD_INIT+0x2e>
	{
		Pincfg.GPIO_PinNumber=Keypad_r[i];
 80002ae:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <KEYPAD_INIT+0x7c>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <KEYPAD_INIT+0x78>)
 80002ba:	801a      	strh	r2, [r3, #0]
		MCAL_GPIO_Init(KEYPAD_PORT, &Pincfg);
 80002bc:	4915      	ldr	r1, [pc, #84]	; (8000314 <KEYPAD_INIT+0x78>)
 80002be:	4817      	ldr	r0, [pc, #92]	; (800031c <KEYPAD_INIT+0x80>)
 80002c0:	f000 fcd1 	bl	8000c66 <MCAL_GPIO_Init>
	for(i=0;i<4;i++)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	ddee      	ble.n	80002ae <KEYPAD_INIT+0x12>
	}
	//	Data_dir |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
	Pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <KEYPAD_INIT+0x78>)
 80002d2:	2204      	movs	r2, #4
 80002d4:	709a      	strb	r2, [r3, #2]
	Pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <KEYPAD_INIT+0x78>)
 80002d8:	2201      	movs	r2, #1
 80002da:	70da      	strb	r2, [r3, #3]

	for(i=0;i<4;i++)
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	e00d      	b.n	80002fe <KEYPAD_INIT+0x62>
	{
		Pincfg.GPIO_PinNumber=Keypad_c[i];
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <KEYPAD_INIT+0x84>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <KEYPAD_INIT+0x78>)
 80002ee:	801a      	strh	r2, [r3, #0]
		MCAL_GPIO_Init(KEYPAD_PORT, &Pincfg);
 80002f0:	4908      	ldr	r1, [pc, #32]	; (8000314 <KEYPAD_INIT+0x78>)
 80002f2:	480a      	ldr	r0, [pc, #40]	; (800031c <KEYPAD_INIT+0x80>)
 80002f4:	f000 fcb7 	bl	8000c66 <MCAL_GPIO_Init>
	for(i=0;i<4;i++)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b03      	cmp	r3, #3
 8000302:	ddee      	ble.n	80002e2 <KEYPAD_INIT+0x46>
	}
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000304:	21ff      	movs	r1, #255	; 0xff
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <KEYPAD_INIT+0x80>)
 8000308:	f000 fd40 	bl	8000d8c <MCAL_GPIO_WritePort>
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000060 	.word	0x20000060
 8000318:	20000000 	.word	0x20000000
 800031c:	40010c00 	.word	0x40010c00
 8000320:	20000010 	.word	0x20000010

08000324 <LCD_clear_screen>:
#include "lcd.h"
uint16_t GPIO_PINS[16]={GPIO_PIN0,GPIO_PIN1,GPIO_PIN2,GPIO_PIN3,GPIO_PIN4,GPIO_PIN5,GPIO_PIN6,GPIO_PIN7,GPIO_PIN8,GPIO_PIN9,GPIO_PIN10,GPIO_PIN11,GPIO_PIN12,GPIO_PIN13,GPIO_PIN14,GPIO_PIN15};

void LCD_clear_screen(){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000328:	2001      	movs	r0, #1
 800032a:	f000 f8e5 	bl	80004f8 <LCD_WRITE_COMMAND>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//LCD_CTRL |= (1 << EN_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <LCD_lcd_kick+0x28>)
 8000340:	f000 fd0d 	bl	8000d5e <MCAL_GPIO_WritePin>
	my_wait_ms(50);
 8000344:	2032      	movs	r0, #50	; 0x32
 8000346:	f000 f94b 	bl	80005e0 <my_wait_ms>
	//LCD_CTRL &= ~(1 << EN_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <LCD_lcd_kick+0x28>)
 8000352:	f000 fd04 	bl	8000d5e <MCAL_GPIO_WritePin>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010800 	.word	0x40010800

08000360 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	460a      	mov	r2, r1
 800036a:	71fb      	strb	r3, [r7, #7]
 800036c:	4613      	mov	r3, r2
 800036e:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d108      	bne.n	8000388 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b0f      	cmp	r3, #15
 800037a:	d805      	bhi.n	8000388 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	3b80      	subs	r3, #128	; 0x80
 8000380:	b2db      	uxtb	r3, r3
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f8b8 	bl	80004f8 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b02      	cmp	r3, #2
 800038c:	d108      	bne.n	80003a0 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	2b0f      	cmp	r3, #15
 8000392:	d805      	bhi.n	80003a0 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	3b40      	subs	r3, #64	; 0x40
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f8ac 	bl	80004f8 <LCD_WRITE_COMMAND>
		}
	}
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <LCD_INIT>:

GPIO_PinConfig_t Pincfg;
int i=0;

void LCD_INIT(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	my_wait_ms(20);
 80003ae:	2014      	movs	r0, #20
 80003b0:	f000 f916 	bl	80005e0 <my_wait_ms>
	Pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <LCD_INIT+0xa4>)
 80003b6:	2204      	movs	r2, #4
 80003b8:	709a      	strb	r2, [r3, #2]
	Pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <LCD_INIT+0xa4>)
 80003bc:	2201      	movs	r2, #1
 80003be:	70da      	strb	r2, [r3, #3]

	Pincfg.GPIO_PinNumber=EN_SWITCH;
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <LCD_INIT+0xa4>)
 80003c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA, &Pincfg);
 80003c8:	4920      	ldr	r1, [pc, #128]	; (800044c <LCD_INIT+0xa4>)
 80003ca:	4821      	ldr	r0, [pc, #132]	; (8000450 <LCD_INIT+0xa8>)
 80003cc:	f000 fc4b 	bl	8000c66 <MCAL_GPIO_Init>

	Pincfg.GPIO_PinNumber=RS_SWITCH;
 80003d0:	4b1e      	ldr	r3, [pc, #120]	; (800044c <LCD_INIT+0xa4>)
 80003d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA, &Pincfg);
 80003d8:	491c      	ldr	r1, [pc, #112]	; (800044c <LCD_INIT+0xa4>)
 80003da:	481d      	ldr	r0, [pc, #116]	; (8000450 <LCD_INIT+0xa8>)
 80003dc:	f000 fc43 	bl	8000c66 <MCAL_GPIO_Init>

	Pincfg.GPIO_PinNumber=RW_SWITCH;
 80003e0:	4b1a      	ldr	r3, [pc, #104]	; (800044c <LCD_INIT+0xa4>)
 80003e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA, &Pincfg);
 80003e8:	4918      	ldr	r1, [pc, #96]	; (800044c <LCD_INIT+0xa4>)
 80003ea:	4819      	ldr	r0, [pc, #100]	; (8000450 <LCD_INIT+0xa8>)
 80003ec:	f000 fc3b 	bl	8000c66 <MCAL_GPIO_Init>
	//	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	//	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	//DataDir_LCD_PORT = 0xFF;

#ifdef EIGHT_BIT_MODE
	Pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003f0:	4b16      	ldr	r3, [pc, #88]	; (800044c <LCD_INIT+0xa4>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	709a      	strb	r2, [r3, #2]
	Pincfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <LCD_INIT+0xa4>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i<8; i++){
 80003fc:	2300      	movs	r3, #0
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	e00c      	b.n	800041c <LCD_INIT+0x74>
			Pincfg.GPIO_PinNumber = GPIO_PINS[i];
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <LCD_INIT+0xac>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <LCD_INIT+0xa4>)
 800040c:	801a      	strh	r2, [r3, #0]
			MCAL_GPIO_Init(LCD_PORT, &Pincfg);
 800040e:	490f      	ldr	r1, [pc, #60]	; (800044c <LCD_INIT+0xa4>)
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <LCD_INIT+0xa8>)
 8000412:	f000 fc28 	bl	8000c66 <MCAL_GPIO_Init>
	for(int i = 0; i<8; i++){
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b07      	cmp	r3, #7
 8000420:	ddef      	ble.n	8000402 <LCD_INIT+0x5a>
	}

	my_wait_ms(15);
 8000422:	200f      	movs	r0, #15
 8000424:	f000 f8dc 	bl	80005e0 <my_wait_ms>
	LCD_clear_screen();
 8000428:	f7ff ff7c 	bl	8000324 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800042c:	2038      	movs	r0, #56	; 0x38
 800042e:	f000 f863 	bl	80004f8 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000432:	2006      	movs	r0, #6
 8000434:	f000 f860 	bl	80004f8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000438:	2080      	movs	r0, #128	; 0x80
 800043a:	f000 f85d 	bl	80004f8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800043e:	200f      	movs	r0, #15
 8000440:	f000 f85a 	bl	80004f8 <LCD_WRITE_COMMAND>
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000060 	.word	0x20000060
 8000450:	40010800 	.word	0x40010800
 8000454:	20000020 	.word	0x20000020

08000458 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0

	//DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
	Pincfg.GPIO_MODE=GPIO_MODE_INPUT_FLOAT;
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <LCD_check_lcd_isbusy+0x94>)
 8000460:	2201      	movs	r2, #1
 8000462:	709a      	strb	r2, [r3, #2]
	for(int i = 0; i<8; i++){
 8000464:	2300      	movs	r3, #0
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	e00c      	b.n	8000484 <LCD_check_lcd_isbusy+0x2c>
			Pincfg.GPIO_PinNumber = GPIO_PINS[i];
 800046a:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <LCD_check_lcd_isbusy+0x98>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000472:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <LCD_check_lcd_isbusy+0x94>)
 8000474:	801a      	strh	r2, [r3, #0]
			MCAL_GPIO_Init(LCD_PORT, &Pincfg);
 8000476:	491d      	ldr	r1, [pc, #116]	; (80004ec <LCD_check_lcd_isbusy+0x94>)
 8000478:	481e      	ldr	r0, [pc, #120]	; (80004f4 <LCD_check_lcd_isbusy+0x9c>)
 800047a:	f000 fbf4 	bl	8000c66 <MCAL_GPIO_Init>
	for(int i = 0; i<8; i++){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3301      	adds	r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b07      	cmp	r3, #7
 8000488:	ddef      	ble.n	800046a <LCD_check_lcd_isbusy+0x12>
	}

	//LCD_CTRL |= (1 << RW_SWITCH);
	//LCD_CTRL &= ~(1 << RS_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000490:	4818      	ldr	r0, [pc, #96]	; (80004f4 <LCD_check_lcd_isbusy+0x9c>)
 8000492:	f000 fc64 	bl	8000d5e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4815      	ldr	r0, [pc, #84]	; (80004f4 <LCD_check_lcd_isbusy+0x9c>)
 800049e:	f000 fc5e 	bl	8000d5e <MCAL_GPIO_WritePin>

	LCD_lcd_kick();
 80004a2:	f7ff ff47 	bl	8000334 <LCD_lcd_kick>


	//DataDir_LCD_PORT |= (0xFF<<DATA_shift);
	Pincfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <LCD_check_lcd_isbusy+0x94>)
 80004a8:	2204      	movs	r2, #4
 80004aa:	709a      	strb	r2, [r3, #2]
	Pincfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <LCD_check_lcd_isbusy+0x94>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i<8; i++){
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	e00c      	b.n	80004d2 <LCD_check_lcd_isbusy+0x7a>
			Pincfg.GPIO_PinNumber = GPIO_PINS[i];
 80004b8:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <LCD_check_lcd_isbusy+0x98>)
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <LCD_check_lcd_isbusy+0x94>)
 80004c2:	801a      	strh	r2, [r3, #0]
			MCAL_GPIO_Init(LCD_PORT, &Pincfg);
 80004c4:	4909      	ldr	r1, [pc, #36]	; (80004ec <LCD_check_lcd_isbusy+0x94>)
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <LCD_check_lcd_isbusy+0x9c>)
 80004c8:	f000 fbcd 	bl	8000c66 <MCAL_GPIO_Init>
	for(int i = 0; i<8; i++){
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	ddef      	ble.n	80004b8 <LCD_check_lcd_isbusy+0x60>
	}

	//LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <LCD_check_lcd_isbusy+0x9c>)
 80004e0:	f000 fc3d 	bl	8000d5e <MCAL_GPIO_WritePin>


}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000060 	.word	0x20000060
 80004f0:	20000020 	.word	0x20000020
 80004f4:	40010800 	.word	0x40010800

080004f8 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000502:	f7ff ffa9 	bl	8000458 <LCD_check_lcd_isbusy>
	//LCD_PORT = command;
	MCAL_GPIO_WritePort(LCD_PORT, command);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	b29b      	uxth	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	480b      	ldr	r0, [pc, #44]	; (800053c <LCD_WRITE_COMMAND+0x44>)
 800050e:	f000 fc3d 	bl	8000d8c <MCAL_GPIO_WritePort>

	//LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <LCD_WRITE_COMMAND+0x44>)
 800051a:	f000 fc20 	bl	8000d5e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <LCD_WRITE_COMMAND+0x44>)
 8000526:	f000 fc1a 	bl	8000d5e <MCAL_GPIO_WritePin>

	my_wait_ms(20);
 800052a:	2014      	movs	r0, #20
 800052c:	f000 f858 	bl	80005e0 <my_wait_ms>
	LCD_lcd_kick();
 8000530:	f7ff ff00 	bl	8000334 <LCD_lcd_kick>
	LCD_lcd_kick ();
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
#endif
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40010800 	.word	0x40010800

08000540 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 800054a:	f7ff ff85 	bl	8000458 <LCD_check_lcd_isbusy>
	//LCD_PORT = character;
	MCAL_GPIO_WritePort(LCD_PORT, character);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	b29b      	uxth	r3, r3
 8000552:	4619      	mov	r1, r3
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <LCD_WRITE_CHAR+0x44>)
 8000556:	f000 fc19 	bl	8000d8c <MCAL_GPIO_WritePort>

	//LCD_CTRL &= ~(1 << RW_SWITCH);
	//LCD_CTRL |= (1 << RS_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <LCD_WRITE_CHAR+0x44>)
 8000562:	f000 fbfc 	bl	8000d5e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <LCD_WRITE_CHAR+0x44>)
 800056e:	f000 fbf6 	bl	8000d5e <MCAL_GPIO_WritePin>

	my_wait_ms(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f000 f834 	bl	80005e0 <my_wait_ms>
	LCD_lcd_kick();
 8000578:	f7ff fedc 	bl	8000334 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	LCD_lcd_kick ();
#endif
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40010800 	.word	0x40010800

08000588 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000594:	e01c      	b.n	80005d0 <LCD_WRITE_STRING+0x48>
		count++;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	607a      	str	r2, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffcb 	bl	8000540 <LCD_WRITE_CHAR>
		if (count == 16)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b10      	cmp	r3, #16
 80005ae:	d104      	bne.n	80005ba <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2002      	movs	r0, #2
 80005b4:	f7ff fed4 	bl	8000360 <LCD_GOTO_XY>
 80005b8:	e00a      	b.n	80005d0 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b20      	cmp	r3, #32
 80005be:	d107      	bne.n	80005d0 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80005c0:	f7ff feb0 	bl	8000324 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80005c4:	2100      	movs	r1, #0
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff feca 	bl	8000360 <LCD_GOTO_XY>
			count = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1de      	bne.n	8000596 <LCD_WRITE_STRING+0xe>
		}
	}
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <my_wait_ms>:

void my_wait_ms (int x)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint32_t i , j ;
	for (i= 0 ; i<x ; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e00b      	b.n	8000606 <my_wait_ms+0x26>
		for (j= 0 ; j<255 ; j++);
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	e002      	b.n	80005fa <my_wait_ms+0x1a>
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	3301      	adds	r3, #1
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2bfe      	cmp	r3, #254	; 0xfe
 80005fe:	d9f9      	bls.n	80005f4 <my_wait_ms+0x14>
	for (i= 0 ; i<x ; i++)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3301      	adds	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	429a      	cmp	r2, r3
 800060c:	d3ef      	bcc.n	80005ee <my_wait_ms+0xe>
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <EXTI_UPDATE>:
													(x==GPIOD)?3:0 )


//=====================================

void EXTI_UPDATE(EXTI_PinConfig_t* EXTI_config){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//1-configure GPIO pin to be Alternative(floating)

	GPIO_PinConfig_t pincfg;
	pincfg.GPIO_PinNumber = EXTI_config->EXTI_pin.GPIO_pin_number;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	813b      	strh	r3, [r7, #8]
	pincfg.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000626:	2301      	movs	r3, #1
 8000628:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_config->EXTI_pin.GPIO_port, &pincfg);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f107 0208 	add.w	r2, r7, #8
 8000632:	4611      	mov	r1, r2
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fb16 	bl	8000c66 <MCAL_GPIO_Init>

	//============================================================================================
	//2- update AFIO to route between EXTI line with port A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_config->EXTI_pin.EXTI_line_number / 4;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	b29b      	uxth	r3, r3
 8000642:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_config->EXTI_pin.EXTI_line_number % 4)*4;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0303 	and.w	r3, r3, #3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	73bb      	strb	r3, [r7, #14]

	//clear the 4 bits of the AFIO_EXTICR first before writing
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 8000654:	4a57      	ldr	r2, [pc, #348]	; (80007b4 <EXTI_UPDATE+0x19c>)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3302      	adds	r3, #2
 800065a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	210f      	movs	r1, #15
 8000662:	fa01 f303 	lsl.w	r3, r1, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	4952      	ldr	r1, [pc, #328]	; (80007b4 <EXTI_UPDATE+0x19c>)
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	4002      	ands	r2, r0
 8000670:	3302      	adds	r3, #2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_EXTI_GPIO_MAPPING(EXTI_config->EXTI_pin.GPIO_port) &0xF) << AFIO_EXTICR_position);
 8000676:	4a4f      	ldr	r2, [pc, #316]	; (80007b4 <EXTI_UPDATE+0x19c>)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3302      	adds	r3, #2
 800067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	494c      	ldr	r1, [pc, #304]	; (80007b8 <EXTI_UPDATE+0x1a0>)
 8000686:	428b      	cmp	r3, r1
 8000688:	d016      	beq.n	80006b8 <EXTI_UPDATE+0xa0>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	494b      	ldr	r1, [pc, #300]	; (80007bc <EXTI_UPDATE+0x1a4>)
 8000690:	428b      	cmp	r3, r1
 8000692:	d00f      	beq.n	80006b4 <EXTI_UPDATE+0x9c>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4949      	ldr	r1, [pc, #292]	; (80007c0 <EXTI_UPDATE+0x1a8>)
 800069a:	428b      	cmp	r3, r1
 800069c:	d008      	beq.n	80006b0 <EXTI_UPDATE+0x98>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4948      	ldr	r1, [pc, #288]	; (80007c4 <EXTI_UPDATE+0x1ac>)
 80006a4:	428b      	cmp	r3, r1
 80006a6:	d101      	bne.n	80006ac <EXTI_UPDATE+0x94>
 80006a8:	2303      	movs	r3, #3
 80006aa:	e006      	b.n	80006ba <EXTI_UPDATE+0xa2>
 80006ac:	2300      	movs	r3, #0
 80006ae:	e004      	b.n	80006ba <EXTI_UPDATE+0xa2>
 80006b0:	2302      	movs	r3, #2
 80006b2:	e002      	b.n	80006ba <EXTI_UPDATE+0xa2>
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <EXTI_UPDATE+0xa2>
 80006b8:	2300      	movs	r3, #0
 80006ba:	7bb9      	ldrb	r1, [r7, #14]
 80006bc:	408b      	lsls	r3, r1
 80006be:	4618      	mov	r0, r3
 80006c0:	493c      	ldr	r1, [pc, #240]	; (80007b4 <EXTI_UPDATE+0x19c>)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	4302      	orrs	r2, r0
 80006c6:	3302      	adds	r3, #2
 80006c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//============================================================================================
	//3-update Rising or falling register
	EXTI->RTSR &= ~(1<< EXTI_config->EXTI_pin.EXTI_line_number);
 80006cc:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	8812      	ldrh	r2, [r2, #0]
 80006d4:	4611      	mov	r1, r2
 80006d6:	2201      	movs	r2, #1
 80006d8:	408a      	lsls	r2, r1
 80006da:	43d2      	mvns	r2, r2
 80006dc:	4611      	mov	r1, r2
 80006de:	4a3a      	ldr	r2, [pc, #232]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 80006e0:	400b      	ands	r3, r1
 80006e2:	6093      	str	r3, [r2, #8]
	if(EXTI_config->trigger_case == EXTI_Falling){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7b1b      	ldrb	r3, [r3, #12]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10b      	bne.n	8000704 <EXTI_UPDATE+0xec>
			EXTI->FTSR |= (1<<EXTI_config->EXTI_pin.EXTI_line_number);
 80006ec:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	8812      	ldrh	r2, [r2, #0]
 80006f4:	4611      	mov	r1, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	408a      	lsls	r2, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	60d3      	str	r3, [r2, #12]
 8000702:	e025      	b.n	8000750 <EXTI_UPDATE+0x138>
		}
		else if(EXTI_config->trigger_case == EXTI_Rising){
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7b1b      	ldrb	r3, [r3, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10b      	bne.n	8000724 <EXTI_UPDATE+0x10c>
			EXTI->RTSR |= (1<<EXTI_config->EXTI_pin.EXTI_line_number);
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	8812      	ldrh	r2, [r2, #0]
 8000714:	4611      	mov	r1, r2
 8000716:	2201      	movs	r2, #1
 8000718:	408a      	lsls	r2, r1
 800071a:	4611      	mov	r1, r2
 800071c:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6093      	str	r3, [r2, #8]
 8000722:	e015      	b.n	8000750 <EXTI_UPDATE+0x138>
		}
		else{
			EXTI->FTSR |= (1<<EXTI_config->EXTI_pin.EXTI_line_number);
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	4611      	mov	r1, r2
 8000734:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 8000736:	430b      	orrs	r3, r1
 8000738:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<EXTI_config->EXTI_pin.EXTI_line_number);
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	8812      	ldrh	r2, [r2, #0]
 8000742:	4611      	mov	r1, r2
 8000744:	2201      	movs	r2, #1
 8000746:	408a      	lsls	r2, r1
 8000748:	4611      	mov	r1, r2
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800074c:	430b      	orrs	r3, r1
 800074e:	6093      	str	r3, [r2, #8]
		}
		//============================================================================================

		//4- update IRQ handling callback
		Gp_IRQ_Callback[EXTI_config->EXTI_pin.EXTI_line_number] = EXTI_config->P_IRQ_Callback;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <EXTI_UPDATE+0x1b4>)
 800075c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//============================================================================================

		//5- enable IRQ in EXTI and NVIC
		if(EXTI_config->IRQ_define == EXTI_IRQ_enable){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	7b5b      	ldrb	r3, [r3, #13]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d110      	bne.n	800078a <EXTI_UPDATE+0x172>
			EXTI->IMR |= (1<<EXTI_config->EXTI_pin.EXTI_line_number);
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	8812      	ldrh	r2, [r2, #0]
 8000770:	4611      	mov	r1, r2
 8000772:	2201      	movs	r2, #1
 8000774:	408a      	lsls	r2, r1
 8000776:	4611      	mov	r1, r2
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800077a:	430b      	orrs	r3, r1
 800077c:	6013      	str	r3, [r2, #0]
			enable_NVIC(EXTI_config->EXTI_pin.EXTI_line_number);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f940 	bl	8000a08 <enable_NVIC>
		else{
			EXTI->IMR &= ~(1<<EXTI_config->EXTI_pin.EXTI_line_number);
			disable_NVIC(EXTI_config->EXTI_pin.EXTI_line_number);
		}

}
 8000788:	e010      	b.n	80007ac <EXTI_UPDATE+0x194>
			EXTI->IMR &= ~(1<<EXTI_config->EXTI_pin.EXTI_line_number);
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	8812      	ldrh	r2, [r2, #0]
 8000792:	4611      	mov	r1, r2
 8000794:	2201      	movs	r2, #1
 8000796:	408a      	lsls	r2, r1
 8000798:	43d2      	mvns	r2, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <EXTI_UPDATE+0x1b0>)
 800079e:	400b      	ands	r3, r1
 80007a0:	6013      	str	r3, [r2, #0]
			disable_NVIC(EXTI_config->EXTI_pin.EXTI_line_number);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f994 	bl	8000ad4 <disable_NVIC>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40010000 	.word	0x40010000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40011400 	.word	0x40011400
 80007c8:	40010400 	.word	0x40010400
 80007cc:	20000064 	.word	0x20000064

080007d0 <MCAL_EXTI_GPIO_Init>:
 * Note                  - for stm32f103c6 use only GPIO port A  B C D but package 	LQFP48 has only A  B part of  C D
 *                       - ALSO not no open clock for AFIO and the GPIOX port
 * */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_config)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	EXTI_UPDATE(EXTI_config);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff1d 	bl	8000618 <EXTI_UPDATE>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <EXTI0_IRQHandler>:

//================== ISR Functions==========================================


void EXTI0_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<0);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <EXTI0_IRQHandler+0x1c>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <EXTI0_IRQHandler+0x1c>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[0]();
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <EXTI0_IRQHandler+0x20>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4798      	blx	r3
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40010400 	.word	0x40010400
 8000808:	20000064 	.word	0x20000064

0800080c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI1_IRQHandler+0x1c>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <EXTI1_IRQHandler+0x1c>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[1]();
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <EXTI1_IRQHandler+0x20>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	4798      	blx	r3
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010400 	.word	0x40010400
 800082c:	20000064 	.word	0x20000064

08000830 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <EXTI2_IRQHandler+0x1c>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <EXTI2_IRQHandler+0x1c>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[2]();
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <EXTI2_IRQHandler+0x20>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	4798      	blx	r3
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010400 	.word	0x40010400
 8000850:	20000064 	.word	0x20000064

08000854 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <EXTI3_IRQHandler+0x1c>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <EXTI3_IRQHandler+0x1c>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[3]();
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <EXTI3_IRQHandler+0x20>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4798      	blx	r3
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40010400 	.word	0x40010400
 8000874:	20000064 	.word	0x20000064

08000878 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <EXTI4_IRQHandler+0x1c>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <EXTI4_IRQHandler+0x1c>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[4]();
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <EXTI4_IRQHandler+0x20>)
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	4798      	blx	r3
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010400 	.word	0x40010400
 8000898:	20000064 	.word	0x20000064

0800089c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler  (void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )   {EXTI->PR |=    (1<<5);     Gp_IRQ_Callback[5](); }
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d008      	beq.n	80008be <EXTI9_5_IRQHandler+0x22>
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a22      	ldr	r2, [pc, #136]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008b2:	f043 0320 	orr.w	r3, r3, #32
 80008b6:	6153      	str	r3, [r2, #20]
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <EXTI9_5_IRQHandler+0xa4>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )   {EXTI->PR |=    (1<<6);     Gp_IRQ_Callback[6](); }
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d008      	beq.n	80008dc <EXTI9_5_IRQHandler+0x40>
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <EXTI9_5_IRQHandler+0xa4>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4798      	blx	r3
	if(EXTI->PR & 1<<7)    {EXTI->PR |=    (1<<7);      Gp_IRQ_Callback[7](); }
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d008      	beq.n	80008fa <EXTI9_5_IRQHandler+0x5e>
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6153      	str	r3, [r2, #20]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <EXTI9_5_IRQHandler+0xa4>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )   {EXTI->PR |=    (1<<8);     Gp_IRQ_Callback[8](); }
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <EXTI9_5_IRQHandler+0x7c>
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a0c      	ldr	r2, [pc, #48]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 800090c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <EXTI9_5_IRQHandler+0xa4>)
 8000914:	6a1b      	ldr	r3, [r3, #32]
 8000916:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )   {EXTI->PR |=    (1<<9);     Gp_IRQ_Callback[9](); }
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <EXTI9_5_IRQHandler+0x9a>
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <EXTI9_5_IRQHandler+0xa0>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6153      	str	r3, [r2, #20]
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <EXTI9_5_IRQHandler+0xa4>)
 8000932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000934:	4798      	blx	r3
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010400 	.word	0x40010400
 8000940:	20000064 	.word	0x20000064

08000944 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 )   {EXTI->PR |=    (1<<10);     Gp_IRQ_Callback[10](); }
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000950:	2b00      	cmp	r3, #0
 8000952:	d008      	beq.n	8000966 <EXTI15_10_IRQHandler+0x22>
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 800095a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095e:	6153      	str	r3, [r2, #20]
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <EXTI15_10_IRQHandler+0xc0>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	4798      	blx	r3
	if(EXTI->PR & 1<<11 )   {EXTI->PR |=    (1<<11);     Gp_IRQ_Callback[11](); }
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800096e:	2b00      	cmp	r3, #0
 8000970:	d008      	beq.n	8000984 <EXTI15_10_IRQHandler+0x40>
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 8000978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <EXTI15_10_IRQHandler+0xc0>)
 8000980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000982:	4798      	blx	r3
	if(EXTI->PR & 1<<12 )   {EXTI->PR |=    (1<<12);     Gp_IRQ_Callback[12](); }
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d008      	beq.n	80009a2 <EXTI15_10_IRQHandler+0x5e>
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 8000996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800099a:	6153      	str	r3, [r2, #20]
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <EXTI15_10_IRQHandler+0xc0>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4798      	blx	r3
	if(EXTI->PR & 1<<13 )   {EXTI->PR |=    (1<<13);     Gp_IRQ_Callback[13](); }
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d008      	beq.n	80009c0 <EXTI15_10_IRQHandler+0x7c>
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <EXTI15_10_IRQHandler+0xc0>)
 80009bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009be:	4798      	blx	r3
	if(EXTI->PR & 1<<14 )   {EXTI->PR |=    (1<<14);     Gp_IRQ_Callback[14](); }
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <EXTI15_10_IRQHandler+0x9a>
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	6153      	str	r3, [r2, #20]
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <EXTI15_10_IRQHandler+0xc0>)
 80009da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009dc:	4798      	blx	r3
	if(EXTI->PR & 1<<15 )   {EXTI->PR |=    (1<<15);     Gp_IRQ_Callback[15](); }
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d008      	beq.n	80009fc <EXTI15_10_IRQHandler+0xb8>
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <EXTI15_10_IRQHandler+0xbc>)
 80009f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <EXTI15_10_IRQHandler+0xc0>)
 80009f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009fa:	4798      	blx	r3
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40010400 	.word	0x40010400
 8000a04:	20000064 	.word	0x20000064

08000a08 <enable_NVIC>:
//========================================================================================

void enable_NVIC(uint16_t IRQ)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d854      	bhi.n	8000ac2 <enable_NVIC+0xba>
 8000a18:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <enable_NVIC+0x18>)
 8000a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1e:	bf00      	nop
 8000a20:	08000a61 	.word	0x08000a61
 8000a24:	08000a6f 	.word	0x08000a6f
 8000a28:	08000a7d 	.word	0x08000a7d
 8000a2c:	08000a8b 	.word	0x08000a8b
 8000a30:	08000a99 	.word	0x08000a99
 8000a34:	08000aa7 	.word	0x08000aa7
 8000a38:	08000aa7 	.word	0x08000aa7
 8000a3c:	08000aa7 	.word	0x08000aa7
 8000a40:	08000aa7 	.word	0x08000aa7
 8000a44:	08000aa7 	.word	0x08000aa7
 8000a48:	08000ab5 	.word	0x08000ab5
 8000a4c:	08000ab5 	.word	0x08000ab5
 8000a50:	08000ab5 	.word	0x08000ab5
 8000a54:	08000ab5 	.word	0x08000ab5
 8000a58:	08000ab5 	.word	0x08000ab5
 8000a5c:	08000ab5 	.word	0x08000ab5
	{
	case 0:
		NVIC_IRQ6_EXTI0_enable();
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <enable_NVIC+0xc4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <enable_NVIC+0xc4>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	6013      	str	r3, [r2, #0]
		break;
 8000a6c:	e029      	b.n	8000ac2 <enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_enable();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <enable_NVIC+0xc4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <enable_NVIC+0xc4>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	6013      	str	r3, [r2, #0]
		break;
 8000a7a:	e022      	b.n	8000ac2 <enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_enable();
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <enable_NVIC+0xc4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <enable_NVIC+0xc4>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
		break;
 8000a88:	e01b      	b.n	8000ac2 <enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_enable();
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <enable_NVIC+0xc4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <enable_NVIC+0xc4>)
 8000a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a94:	6013      	str	r3, [r2, #0]
		break;
 8000a96:	e014      	b.n	8000ac2 <enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_enable();
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <enable_NVIC+0xc4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <enable_NVIC+0xc4>)
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa2:	6013      	str	r3, [r2, #0]
		break;
 8000aa4:	e00d      	b.n	8000ac2 <enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_EXTI9_enable();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <enable_NVIC+0xc4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <enable_NVIC+0xc4>)
 8000aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ab0:	6013      	str	r3, [r2, #0]
		break;
 8000ab2:	e006      	b.n	8000ac2 <enable_NVIC+0xba>
	case 12:
	case 13:
	case 14:
	case 15:

		NVIC_IRQ40_EXTI10_to_EXTI15_enable();
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <enable_NVIC+0xc8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <enable_NVIC+0xc8>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
		break;
 8000ac0:	bf00      	nop


	}


}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000e104 	.word	0xe000e104

08000ad4 <disable_NVIC>:
void disable_NVIC(uint16_t IRQ)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d854      	bhi.n	8000b8e <disable_NVIC+0xba>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <disable_NVIC+0x18>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b2d 	.word	0x08000b2d
 8000af0:	08000b3b 	.word	0x08000b3b
 8000af4:	08000b49 	.word	0x08000b49
 8000af8:	08000b57 	.word	0x08000b57
 8000afc:	08000b65 	.word	0x08000b65
 8000b00:	08000b73 	.word	0x08000b73
 8000b04:	08000b73 	.word	0x08000b73
 8000b08:	08000b73 	.word	0x08000b73
 8000b0c:	08000b73 	.word	0x08000b73
 8000b10:	08000b73 	.word	0x08000b73
 8000b14:	08000b81 	.word	0x08000b81
 8000b18:	08000b81 	.word	0x08000b81
 8000b1c:	08000b81 	.word	0x08000b81
 8000b20:	08000b81 	.word	0x08000b81
 8000b24:	08000b81 	.word	0x08000b81
 8000b28:	08000b81 	.word	0x08000b81
	{
	case 0:
		NVIC_IRQ6_EXTI0_disable();
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <disable_NVIC+0xc4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <disable_NVIC+0xc4>)
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	6013      	str	r3, [r2, #0]
		break;
 8000b38:	e029      	b.n	8000b8e <disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_disable();
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <disable_NVIC+0xc4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <disable_NVIC+0xc4>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6013      	str	r3, [r2, #0]
		break;
 8000b46:	e022      	b.n	8000b8e <disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_disable();
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <disable_NVIC+0xc4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <disable_NVIC+0xc4>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
		break;
 8000b54:	e01b      	b.n	8000b8e <disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_disable();
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <disable_NVIC+0xc4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <disable_NVIC+0xc4>)
 8000b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b60:	6013      	str	r3, [r2, #0]
		break;
 8000b62:	e014      	b.n	8000b8e <disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_disable();
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <disable_NVIC+0xc4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <disable_NVIC+0xc4>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
		break;
 8000b70:	e00d      	b.n	8000b8e <disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_to_EXTI9_disable();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <disable_NVIC+0xc4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <disable_NVIC+0xc4>)
 8000b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b7c:	6013      	str	r3, [r2, #0]
		break;
 8000b7e:	e006      	b.n	8000b8e <disable_NVIC+0xba>
	case 12:
	case 13:
	case 14:
	case 15:

		NVIC_IRQ40_EXTI10_to_EXTI15_disable();
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <disable_NVIC+0xc8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <disable_NVIC+0xc8>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	6013      	str	r3, [r2, #0]
		break;
 8000b8c:	bf00      	nop

	}

}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	e000e180 	.word	0xe000e180
 8000b9c:	e000e184 	.word	0xe000e184

08000ba0 <GET_CRL_Position>:


#include "stm32_f103c6_GPIO.h"

uint8_t GET_CRL_Position(uint16_t PinNumber)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2b80      	cmp	r3, #128	; 0x80
 8000bae:	d042      	beq.n	8000c36 <GET_CRL_Position+0x96>
 8000bb0:	2b80      	cmp	r3, #128	; 0x80
 8000bb2:	dc11      	bgt.n	8000bd8 <GET_CRL_Position+0x38>
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d036      	beq.n	8000c26 <GET_CRL_Position+0x86>
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	dc06      	bgt.n	8000bca <GET_CRL_Position+0x2a>
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d02e      	beq.n	8000c1e <GET_CRL_Position+0x7e>
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d02e      	beq.n	8000c22 <GET_CRL_Position+0x82>
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d028      	beq.n	8000c1a <GET_CRL_Position+0x7a>
 8000bc8:	e047      	b.n	8000c5a <GET_CRL_Position+0xba>
 8000bca:	2b20      	cmp	r3, #32
 8000bcc:	d02f      	beq.n	8000c2e <GET_CRL_Position+0x8e>
 8000bce:	2b40      	cmp	r3, #64	; 0x40
 8000bd0:	d02f      	beq.n	8000c32 <GET_CRL_Position+0x92>
 8000bd2:	2b10      	cmp	r3, #16
 8000bd4:	d029      	beq.n	8000c2a <GET_CRL_Position+0x8a>
 8000bd6:	e040      	b.n	8000c5a <GET_CRL_Position+0xba>
 8000bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bdc:	d033      	beq.n	8000c46 <GET_CRL_Position+0xa6>
 8000bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be2:	dc09      	bgt.n	8000bf8 <GET_CRL_Position+0x58>
 8000be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be8:	d029      	beq.n	8000c3e <GET_CRL_Position+0x9e>
 8000bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bee:	d028      	beq.n	8000c42 <GET_CRL_Position+0xa2>
 8000bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf4:	d021      	beq.n	8000c3a <GET_CRL_Position+0x9a>
 8000bf6:	e030      	b.n	8000c5a <GET_CRL_Position+0xba>
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfc:	d027      	beq.n	8000c4e <GET_CRL_Position+0xae>
 8000bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c02:	dc03      	bgt.n	8000c0c <GET_CRL_Position+0x6c>
 8000c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c08:	d01f      	beq.n	8000c4a <GET_CRL_Position+0xaa>
 8000c0a:	e026      	b.n	8000c5a <GET_CRL_Position+0xba>
 8000c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c10:	d01f      	beq.n	8000c52 <GET_CRL_Position+0xb2>
 8000c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c16:	d01e      	beq.n	8000c56 <GET_CRL_Position+0xb6>
 8000c18:	e01f      	b.n	8000c5a <GET_CRL_Position+0xba>
	{
	case GPIO_PIN0:
		return 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e01e      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	e01c      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000c22:	2308      	movs	r3, #8
 8000c24:	e01a      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000c26:	230c      	movs	r3, #12
 8000c28:	e018      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	e016      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000c2e:	2314      	movs	r3, #20
 8000c30:	e014      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000c32:	2318      	movs	r3, #24
 8000c34:	e012      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000c36:	231c      	movs	r3, #28
 8000c38:	e010      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e00e      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e00c      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8000c42:	2308      	movs	r3, #8
 8000c44:	e00a      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 8000c46:	230c      	movs	r3, #12
 8000c48:	e008      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	e006      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000c4e:	2314      	movs	r3, #20
 8000c50:	e004      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8000c52:	2318      	movs	r3, #24
 8000c54:	e002      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 8000c56:	231c      	movs	r3, #28
 8000c58:	e000      	b.n	8000c5c <GET_CRL_Position+0xbc>
		break;
	}
	return 0;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t * pinconfig)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
	volatile uint32_t* config_register = NULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
	config_register= (pinconfig->GPIO_PinNumber<GPIO_PIN8)? &GPIOX->CRL : &GPIOX->CRH;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	2bff      	cmp	r3, #255	; 0xff
 8000c7a:	d801      	bhi.n	8000c80 <MCAL_GPIO_Init+0x1a>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	e001      	b.n	8000c84 <MCAL_GPIO_Init+0x1e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3304      	adds	r3, #4
 8000c84:	613b      	str	r3, [r7, #16]
	uint8_t pin_CRL_config = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRL_Position(pinconfig->GPIO_PinNumber);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff86 	bl	8000ba0 <GET_CRL_Position>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	601a      	str	r2, [r3, #0]


	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	789b      	ldrb	r3, [r3, #2]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d00b      	beq.n	8000ccc <MCAL_GPIO_Init+0x66>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d007      	beq.n	8000ccc <MCAL_GPIO_Init+0x66>
				(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d003      	beq.n	8000ccc <MCAL_GPIO_Init+0x66>
				(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	789b      	ldrb	r3, [r3, #2]
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d10e      	bne.n	8000cea <MCAL_GPIO_Init+0x84>
		{
				//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
				pin_CRL_config = (((pinconfig->GPIO_MODE-4) <<2) |  (pinconfig->GPIO_Output_Speed)) & 0x0F;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	b25a      	sxtb	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	78db      	ldrb	r3, [r3, #3]
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	75fb      	strb	r3, [r7, #23]
 8000ce8:	e02c      	b.n	8000d44 <MCAL_GPIO_Init+0xde>
		}

	//so ELSE the pin will be ###INPUT
	else{

		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <MCAL_GPIO_Init+0x94>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d107      	bne.n	8000d0a <MCAL_GPIO_Init+0xa4>
			{
				pin_CRL_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	75fb      	strb	r3, [r7, #23]
 8000d08:	e01c      	b.n	8000d44 <MCAL_GPIO_Init+0xde>
			}
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	789b      	ldrb	r3, [r3, #2]
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d102      	bne.n	8000d18 <MCAL_GPIO_Init+0xb2>
			{

				pin_CRL_config = (((GPIO_MODE_INPUT_FLOAT  << 2) | (0x0)) & 0x0F);
 8000d12:	2304      	movs	r3, #4
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e015      	b.n	8000d44 <MCAL_GPIO_Init+0xde>
			}
		else{
					//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
					pin_CRL_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 8000d18:	2308      	movs	r3, #8
 8000d1a:	75fb      	strb	r3, [r7, #23]

					//pin is PU
					if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d107      	bne.n	8000d34 <MCAL_GPIO_Init+0xce>
					{
						//from TRM
						GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	e007      	b.n	8000d44 <MCAL_GPIO_Init+0xde>
					}
					//pin is PD
					else
					{
						//From TRM
						GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	8812      	ldrh	r2, [r2, #0]
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	401a      	ands	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]
					}
				}
			}

		(*config_register) |= (pin_CRL_config << pin_position);
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	7df9      	ldrb	r1, [r7, #23]
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	431a      	orrs	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <MCAL_GPIO_WritePin>:
{
	return (uint16_t)(GPIOX->IDR);
}

void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber, uint8_t value)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	807b      	strh	r3, [r7, #2]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_RESET)
 8000d6e:	787b      	ldrb	r3, [r7, #1]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <MCAL_GPIO_WritePin+0x1e>
		//alternative solution

		//in the BSRR register
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber ;
 8000d74:	887a      	ldrh	r2, [r7, #2]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}

}
 8000d7a:	e002      	b.n	8000d82 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 8000d7c:	887a      	ldrh	r2, [r7, #2]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	615a      	str	r2, [r3, #20]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <MCAL_GPIO_WritePort>:
 * @param[in]	-GPIOx: where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOX , uint16_t value)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR = (uint32_t)value;
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60da      	str	r2, [r3, #12]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <__libc_init_array>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	2500      	movs	r5, #0
 8000dac:	4e0c      	ldr	r6, [pc, #48]	; (8000de0 <__libc_init_array+0x38>)
 8000dae:	4c0d      	ldr	r4, [pc, #52]	; (8000de4 <__libc_init_array+0x3c>)
 8000db0:	1ba4      	subs	r4, r4, r6
 8000db2:	10a4      	asrs	r4, r4, #2
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	d109      	bne.n	8000dcc <__libc_init_array+0x24>
 8000db8:	f000 f81a 	bl	8000df0 <_init>
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	4e0a      	ldr	r6, [pc, #40]	; (8000de8 <__libc_init_array+0x40>)
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <__libc_init_array+0x44>)
 8000dc2:	1ba4      	subs	r4, r4, r6
 8000dc4:	10a4      	asrs	r4, r4, #2
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	d105      	bne.n	8000dd6 <__libc_init_array+0x2e>
 8000dca:	bd70      	pop	{r4, r5, r6, pc}
 8000dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dd0:	4798      	blx	r3
 8000dd2:	3501      	adds	r5, #1
 8000dd4:	e7ee      	b.n	8000db4 <__libc_init_array+0xc>
 8000dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dda:	4798      	blx	r3
 8000ddc:	3501      	adds	r5, #1
 8000dde:	e7f2      	b.n	8000dc6 <__libc_init_array+0x1e>
 8000de0:	08000e3c 	.word	0x08000e3c
 8000de4:	08000e3c 	.word	0x08000e3c
 8000de8:	08000e3c 	.word	0x08000e3c
 8000dec:	08000e40 	.word	0x08000e40

08000df0 <_init>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr

08000dfc <_fini>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	bf00      	nop
 8000e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e02:	bc08      	pop	{r3}
 8000e04:	469e      	mov	lr, r3
 8000e06:	4770      	bx	lr
